# list all dirs on cwd
cwdirs() {
    for dir in $(find . -maxdepth 1 -type d | sed "1d"); do
        echo "$dir"
    done
}

# convert all files in current working directory from one extension to another using ImageMagick
cvt() {
    if [ "$#" -ne 2 ]; then
        echo "Usage: cvt <source_extension> <target_extension>"
        return 1
    fi

    for file in *."$1"; do
        magick "$file" "${file%."$1"}.$2"
    done
}

# compare remote branches with local ones and echo differences
alias grbs='f() {
    original_dir=$(pwd)
    trap "cd \"$original_dir\"; return" SIGINT

    for dir in $(cwdirs); do
        if [[ -d "$dir/.git" ]]; then
            cd "$dir" || continue
            echo "$dir:"
            for branch in $(git branch --list | sed "s/*//"); do
                for remote in $(git remote); do
                    diff_count=$(git diff --stat "$branch" "$remote/$branch" | wc -l)
                    if [[ $diff_count -gt 0 ]]; then
                        echo "  $branch -> $remote/$branch [$diff_count]"
                    fi
                done
            done
            cd "$original_dir" || break
        fi
    done
    cd "$original_dir"
}; f'

# show git status for all repositories in current directory
rgs() {
    find . -maxdepth 1 -type d -exec sh -c '
    if [ -d "{}/.git" ]; then
      echo "{}:";
      git -C {} status --short
    fi
    ' \;
}

# replace spaces with underscores in filenames
rsff() {
    for file in *; do
        if [ -f "$file" ]; then
            newname=$(echo "$file" | tr " " "_")
            mv "$file" "$newname"
        fi
    done
}

# convert folder names to lowercase
lcd() {
    for dir in */; do
        dir="${dir%/}"
        lower_dir=$(echo "$dir" | tr "[:upper:]" "[:lower:]")

        if [ "$dir" != "$lower_dir" ]; then
            mv "$dir" "_temp_$dir"
            mv "_temp_$dir" "$lower_dir"
        fi
    done
}

# convert files names to lowercase and remove accents
lcf() {
    for original_name in *; do
        [ -f "$original_name" ] || continue

        new_name=$(echo "$original_name" | iconv -f UTF-8 -t ASCII//TRANSLIT | tr '[:upper:]' '[:lower:]')

        if [ "$original_name" != "$new_name" ]; then
            if [ -e "$new_name" ]; then
                echo "Warning: '$new_name' already exists. Skipping rename of '$original_name'."
            else
                mv -- "$original_name" "$new_name"
                echo "Renamed: '$original_name' -> '$new_name'"
            fi
        fi
    done
}

# ls with better default options
alias ls='command ls --tabsize=0 --color=auto --human-readable --group-directories-first "$@"'

# recursively find todos
todos() {
    rg --glob '!{.git,node_modules,cloned,dist,build}' -i '\@\bTODO\b' "$@"
}

fixmes() {
    rg --glob '!{.git,node_modules,cloned,dist,build}' -i '\@\bFIXME\b' "$@"
}

# default irb to simple prompt
irb() {
    command irb --simple-prompt "$@"
}

# interactive move
mv() {
    command mv -i "$@"
}

# list files by extension
lfe() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: lfe <extension>"
        return 1
    fi

    ls -l | awk "{print \$9}" | grep "^.*\.$1" | cat
}

# multicat files by extension in current directory
mcat() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: mcat <extension>"
        return 1
    fi

    for file in $(find . -maxdepth 1 -name "*.$1"); do
        echo "--------------- ${file}"
        cat "${file}"
    done
}

# multicat files by extension recursively
mcatr() {
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: mcatr <extension> [ignore-dir]"
        return 1
    fi

    local find_args="-type f -name \"*.$1\""
    if [ "$#" -eq 2 ]; then
        find_args="$find_args -not -path \"*/$2/*\""
    fi

    eval "find . $find_args" | while read -r file; do
        echo "--------------- ${file}"
        cat "${file}"
    done
}

# bat alternatives if bat is available
if command -v bat &>/dev/null; then
    mbat() {
        if [ "$#" -ne 1 ]; then
            echo "Usage: mbat <extension>"
            return 1
        fi

        for file in $(find . -maxdepth 1 -name "*.$1"); do
            echo "--------------- ${file}"
            bat "${file}"
        done
    }

    mbatr() {
        if [ "$#" -ne 1 ]; then
            echo "Usage: mbatr <extension>"
            return 1
        fi

        for file in $(find . -type f -name "*.$1"); do
            echo "--------------- ${file}"
            bat "${file}"
        done
    }
fi

# pdf pages to png
pdf2png() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: pd2png <file>"
        return 1
    fi
    pdftoppm "$1" "$1.output" -png
}

# count pages and words in PDF files
cpwpdf() {
    if [[ $# -ne 0 ]]; then
        echo "Usage: cpwpdf"
        return 1
    fi

    for pdf in *.pdf; do
        if [[ -f "$pdf" ]]; then
            name=$(basename "$pdf" .pdf)
            pages=$(pdftk "$pdf" dump_data | grep "NumberOfPages" | cut -d ":" -f 2 | tr -d " ")
            words=$(pdftotext "$pdf" - | wc -w)
            printf "%s - %d pages - %d words\n" "$name" "$pages" "$words"
        fi
    done
}

# python virtual environment functions
penv() {
    py_version=$(python --version | awk "{print \$2}" | cut -d. -f1-3)
    python -m venv ".venv_$(basename "$(pwd)" | cut -c1-16)_$py_version"
}

pact() {
    version=$(python --version | awk "{print \$2}" | cut -d. -f1-3)
    venv_path=$(find . -maxdepth 1 -type d -name ".venv_$(basename "$(pwd)" | cut -c1-16)_$version" | head -n 1)

    if [ -z "$venv_path" ]; then
        echo "No virtual environment found for version: $version"
        return 1
    fi

    source "$venv_path/bin/activate"
}

# docker process list with prettier formatting
dpsc() {
    docker ps --format 'table {{.ID}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}'
}

# docker container and images deleting
ddcp() {
    docker rm -vf $(docker ps -aq)
}

ddip() {
    docker rmi -f $(docker images -aq)
}

# just a simpler command
oc() {
    open_command "$@"
}

# copy stdout to xclip, use as last stdout receiver to copy
cpstd() {
    if command -v xclip &>/dev/null; then
        xclip -selection clipboard
    elif command -v xsel &>/dev/null; then
        xsel --clipboard --input
    else
        echo "Error: Neither xclip nor xsel is installed."
        return 1
    fi
}

# git history file purge
git-purge() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: git-purge <file>"
        return 1
    fi

    git filter-branch --force --index-filter "git rm --cached --ignore-unmatch $1" --prune-empty --tag-name-filter cat -- --all
}

# update licenses to current year based on command `date`
# only updates LICENSE files inside directories that have a .git folder
licc() {
    current_year=$(date +"%Y")

    find . -type d -name ".git" -prune -exec dirname {} \; | while read -r git_dir; do
        license_file="$git_dir/LICENSE"
        if [[ -f "$license_file" ]]; then
            if ! grep -qE "(^|[^0-9])$current_year([^0-9]|$) (\$|\[)" "$license_file"; then
                sed -i "s/\([0-9]\{4\}\)/\1-$current_year/g" "$license_file"
                echo "$git_dir/LICENSE updated"
            fi
        fi
    done
}


# make extension-sized icons from png image
mkicon() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: mkicon <image_file>"
        return 1
    fi
    for size in 16 48 128; do
        magick "$1" -resize "${size}x${size}!" "$size.png"
    done
}

# read `limit` lines from rockyou & `length` max-sized-lines
headrock() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: headrock <limit> [length]"
        return 1
    fi

    if [ ! -f /usr/share/wordlists/rockyou.txt ]; then
        echo "Error: rockyou.txt not found at /usr/share/wordlists/rockyou.txt"
        return 1
    fi

    limit="$1"
    length="$2"

    if [ -z "$length" ]; then
        head -n "$limit" /usr/share/wordlists/rockyou.txt
    else
        awk -v len="$length" 'length($0) == len' /usr/share/wordlists/rockyou.txt | head -n "$limit"
    fi
}

# run and delete simple C file
rcd() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: rd <file-name>.c"
        return 1
    fi
    filename="${1%.*}"
    gcc "$1" -o "$filename" -lm -Wall -O2 && ./"$filename" && rm "$filename"
}

# multiple cat with file spacing
zat() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: zat <file1> [file2] ..."
        return 1
    fi
    for file in "$@"; do
        if [ ! -f "$file" ]; then
            echo "Error: $file is not a valid file"
            continue
        fi
        separator="------------------"
        echo "$separator"
        echo "- $file"
        echo "$separator"
        cat "$file"
        echo "$separator"
    done
}

# zip files password protected
pzip() {
    if [ "$#" -lt 2 ]; then
        echo "Usage: pzip <archive-name> <file1> [file2] ..."
        return 1
    fi
    archive="$1"
    shift
    7z a -tzip -mem=AES256 -p "$archive.zip" "$@"
}

# download video and remux into mp4/mp3 from youtube
ytdw() {
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: ytdw <url> [format]"
        echo "Format options: mp4 (default), mp3"
        return 1
    fi

    local url="$1"
    local format="${2:-mp4}"

    case "$format" in
        mp4)
            yt-dlp -f "bestvideo[height<=720]+bestaudio[ext=m4a]" --merge-output-format mp4 \
                --postprocessor-args "ffmpeg:-vcodec libx264 -acodec aac" \
                "$url"
            ;;
        mp3)
            yt-dlp -f "bestaudio[ext=m4a]" -x --audio-format mp3 "$url"
            ;;
        *)
            echo "Unsupported format: $format"
            echo "Supported formats: mp4, mp3"
            return 1
            ;;
    esac
}

# show packages from yay and their installed size ordered
yspmb() {
    yay -Qe | cut -d" " -f1 | while read -r pkg; do
        size=$(pacman -Qi "$pkg" | awk '/Installed Size/ {print $4, $5}')
        if [[ $size == *KiB ]]; then
            num=$(echo "$size" | awk '{printf "%.2f", $1/1024}')
        elif [[ $size == *MiB ]]; then
            num=$(echo "$size" | awk '{print $1}')
        elif [[ $size == *GiB ]]; then
            num=$(echo "$size" | awk '{printf "%.2f", $1*1024}')
        fi
        echo "$pkg - $num"
    done | sort -k3 -n
}

# tree-cat files by extension excluding (or not) hidden directories
rcat() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: rcat [--hidden] <extension1> [extension2] ..."
        echo "Example: rcat py js"
        echo "Example: rcat --hidden py js"
        return 1
    fi

    include_hidden=false
    if [ "$1" = "--hidden" ]; then
        include_hidden=true
        shift
    fi

    find_command="find . -type f"

    if [ "$include_hidden" = false ]; then
        find_command="$find_command -not -path \"*/\\.*/*\""
    fi

    extensions=""
    for ext in "$@"; do
        if [ -z "$extensions" ]; then
            extensions="-name \"*.$ext\""
        else
            extensions="$extensions -o -name \"*.$ext\""
        fi
    done

    eval "$find_command $( [ ! -z "$extensions" ] && echo "-and \\( $extensions \\)" )" | sort | while read -r file; do
        echo "------- $file:"
        cat "$file"
        echo
    done
}

# clear pip packages
pclear() {
    pip freeze | xargs pip uninstall -y
}

# save code screenshot from file or stdout
codegrim() {
    local ext="" filename=""

    if [[ "$1" == --ext=* ]]; then
        ext="${1#*=}"
        shift
    fi

    if [[ $# -gt 0 ]]; then
        filename="$1"
        outname="${filename##*/}"
        outname="${outname%.*}"
        freeze "$filename" -o "$HOME/downloads/$outname.png" -c user
    else
        if [[ -z "$ext" ]]; then
            echo "Error: When using stdin, you must specify --ext=extension" >&2
            return 1
        fi

        outname="$(date +%Y%m%d_%H%M%S)"
        freeze - --language="$ext" -o "$HOME/downloads/$outname.png" -c user
    fi
}

# count lines of code recursively by extension
count_lines() {
    if [[ -z "$1" ]]; then
        echo "Usage: count_lines <extension> [-I <regex-directories>]"
        return 1
    fi

    local extension="$1"
    shift
    local ignore_regex=""

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -I)
                if [[ -n "$2" ]]; then
                    ignore_regex="$2"
                    shift
                else
                    echo "Error: -I requires a regular expression."
                    return 1
                fi
                ;;
            *)
                echo "Error: Invalid option '$1'"
                return 1
                ;;
        esac
        shift
    done

    local fd_command="fd -e $extension"

    if [[ -n "$ignore_regex" ]]; then
        fd_command+=" -E \"$ignore_regex\""
    fi

    eval "$fd_command" | xargs cat 2>/dev/null | wc -l
}

ffmcut() {
    local input_file start_time end_time output_file
    local -i start_seconds end_seconds duration_seconds

    if (( $# != 4 )); then
        echo "Usage: ffmcut <input> <mm:ss> <mm:ss> <output>"
        return 1
    fi

    input_file="$1"
    start_time="$2"
    end_time="$3"
    output_file="$4"

    if [[ ! -f "$input_file" ]]; then
        echo "Error: '$input_file' not found."
        return 1
    fi

    mm_ss_to_seconds() {
        local time_str="$1"
        local minutes seconds
        if [[ "$time_str" =~ ^([0-5]?[0-9]):([0-5]?[0-9])$ ]]; then
            minutes=${match[1]}
            seconds=${match[2]}
            echo $(( 10#$minutes * 60 + 10#$seconds ))
        else
            echo "Error: '$time_str' is invalid. Use mm:ss." >&2
            return 1
        fi
    }

    start_seconds=$(mm_ss_to_seconds "$start_time")
    if (( $? != 0 )); then return 1; fi

    end_seconds=$(mm_ss_to_seconds "$end_time")
    if (( $? != 0 )); then return 1; fi

    if (( start_seconds >= end_seconds )); then
        echo "Error: ($start_time) must be less than end time."
        return 1
    fi

    duration_seconds=$(( end_seconds - start_seconds ))

    echo "Saving: '$output_file'"

    ffmpeg -ss "$start_time" -i "$input_file" -t "$duration_seconds" -c copy "$output_file"
}

ffmstable() {
    if [[ -z "$1" || -z "$2" ]]; then
        echo "Usage: ffmstable <input.mp4> <output.mp4>"
        return 1
    fi

    local input_file="$1"
    local output_file="$2"
    local original_fps=$(ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1 "$input_file" | awk -F'/' '{print $1/$2}')
    local target_fps

    if (( $(echo "$original_fps >= 22 && $original_fps <= 26" | bc -l) )); then
        target_fps=24
    elif (( $(echo "$original_fps >= 27 && $original_fps <= 33" | bc -l) )); then
        target_fps=30
    elif (( $(echo "$original_fps >= 55 && $original_fps <= 65" | bc -l) )); then
        target_fps=60
    else
        echo "Warning: Original fps ($original_fps FPS) doesn't fit in either 24, 30 or 60. Using 30 FPS."
        target_fps=30
    fi

    echo "Converting '$input_file' to constant ${target_fps} FPS."
    ffmpeg -i "$input_file" -filter:v fps="$target_fps" -c:a copy "$output_file"
}

pack() {
    local PACK_IGNORE_FILE="$HOME/.pack_ignore"

    if ! command -v rsync &> /dev/null; then
        echo "Error: rsync is not installed." >&2
        return 1
    fi

    if [[ $# -ne 1 ]]; then
        echo "Usage: pack <folder_to_pack>" >&2
        return 1
    fi

    local source_dir
    source_dir=$(realpath "$1")
    if [[ ! -d "$source_dir" ]]; then
        echo "Error: '$1' is not a valid directory." >&2
        return 1
    fi

    local dir_name
    dir_name=$(basename "$source_dir")
    local dest_dir="./packed_${dir_name}"

    if [[ -e "$dest_dir" ]]; then
        echo "Error: Destination '$dest_dir' already exists." >&2
        return 1
    fi

    echo "Packing '$dir_name' into '$dest_dir'..."

    rsync -avh --progress --exclude-from="$PACK_IGNORE_FILE" "$source_dir/" "$dest_dir/"

    if [[ $? -eq 0 ]]; then
        echo "\nSuccessfully packed directory."
        echo "  Source:      $source_dir"
        echo "  Destination: $(realpath "$dest_dir")"
    else
        echo "\nAn error occurred during packing." >&2
        rm -rf "$dest_dir"
        return 1
    fi
}

alias hd='hexdump'

# remove audio from mp4 file
mp4_mute() {
    if [[ -z "$1" ]]; then
        echo "Usage: mp4_mute <path_to_mp4_file>"
        return 1
    fi

    local input_file="$1"
    local temp_file="${input_file%.*}_no_audio_temp.mp4"

    if [[ ! -f "$input_file" ]]; then
        echo "Error: File not found: $input_file"
        return 1
    fi

    if ffmpeg -i "$input_file" -c copy -an "$temp_file" >/dev/null 2>&1; then
        if mv "$temp_file" "$input_file"; then
            echo "Successfully removed audio from $input_file."
        else
            echo "Error: Failed to overwrite $input_file with the temporary file."
            rm -f "$temp_file"
            return 1
        fi
    else
        echo "Error: ffmpeg failed to process the file: $input_file"
        rm -f "$temp_file"
        return 1
    fi
}

html2png() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: html2png <file.html>"
        return 1
    fi
    wkhtmltoimage --format png "$1" "${1%.html}.png"
}

parquet2csv() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: parquet2csv <file.parquet>"
        return 1
    fi
    local parquet_file="$1"
    local csv_file="${parquet_file##*/}"
    csv_file="${csv_file%.parquet}.csv"
    duckdb -c "COPY (SELECT * FROM '${parquet_file}') TO '${csv_file}' (HEADER, FORMAT 'csv');"
}

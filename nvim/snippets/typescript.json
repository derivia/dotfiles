{"reqresn":{"prefix":"reqresn","body":"req: Request, res: Response, next: NextFunction"},"corsopts":{"body":["const corsOptions: CorsOptions = {","\torigin:","\t\tprocess.env.NODE_ENV === \"development\"","\t\t\t? [\"http:\/\/localhost:5173\", \"http:\/\/ui:5173\"] \/\/ 5173 - Vite default port","\t\t\t: \"https:\/\/<production-domain>\",","\tcredentials: true,","\tmethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],","\tallowedHeaders: [\"Content-Type\", \"Authorization\"],","};"],"prefix":"corsopts"},"ensauth":{"prefix":"ensauth","body":["export async function ensureAuthentication(","  req: AuthRequest, \/\/ <-- defined this correctly","  res: Response,","  next: NextFunction,",") {","  try {","    const authHeader = req.headers.authorization;","    if (!authHeader?.startsWith(\"Bearer \")) {","      return res.status(401).json({ error: \"Unauthorized\" });","    }","","    const token = authHeader.split(\" \")[1]; \/\/ gets the bearer token value","","    if (!token) {","      return res.status(401).json({ error: \"Unauthorized\" });","    }","","    verify(","      token,","      process.env.JWT_SECRET as string,","      (err: VerifyErrors | null, decoded: JwtPayload | string | undefined) => {","        if (err) {","          return res.status(401).json({ error: \"Unauthorized\" });","        }","        if (!decoded || typeof decoded === \"string\") {","          return res.status(401).json({","            error: \"Invalid token payload\",","          });","        }","        req.user = decoded as JwtPayload;","        return next();","      },","    );","  } catch (err) {","    return res.status(401).json({ error: \"Authentication failed\" });","  }","}"]},"expdef":{"body":["import express, { Request, Response } from \"express\";","import dotenv from \"dotenv\";","import helmet from \"helmet\";","import cors from \"cors\";","","dotenv.config()","","const app = express();","app.use(helmet());","app.disable(\"x-powered-by\");","app.use(cors())","app.use(express.json());","const port = process.env.PORT || 3030;","","\/\/ imported things go here, after security and json configuration","","\/\/ default unknown endpoint response","app.use((_req: Request, res: Response) => {","  res.status(404).json({ error: \"not found\" });","});","","const server = app.listen(port, () => {","  console.log(\"[Server] listening on port \" + port);","});","","process.on(\"SIGTERM\", () => {","  debug(\"Gracefully stopping HTTP server.\")","  server.close(() => {","    debug(\"Server closed.\")","  })","})"],"prefix":"expdef"},"baseurl":{"prefix":"baseurl","body":["const BASE_URL = import.meta.env","\t? \"http:\/\/localhost:3000\/api\"","\t: \"https:\/\/<production-domain>\/api\";"]},"prism":{"prefix":"prism","body":["import { PrismaClient } from \"@prisma\/client\";","","const prisma = new PrismaClient();","","async function main() {","  \/\/ ... you will write your Prisma Client queries here","}","","main()","  .then(async () => {","    await prisma.\\$disconnect();","  })","  .catch(async (e) => {","    console.error(e);","    await prisma.\\$disconnect();","    process.exit(1);","  });"]},"jwheader":{"prefix":"jwheader","body":["\/\/ prettier-ignore","function authenticateToken(req: Request, res: Response, next: NextFunction): any {","  const authHeader = req.headers[\"authorization\"]","  const token = authHeader && authHeader.split(\" \")[1]","}"]},"404":{"prefix":"404","body":["app.use(function (req: Request, res: Response, next: NextFunction) {","  res.status(404).json({ error: \"Not found\" });","  return;","});"]},"asyncauth":{"prefix":"asyncauth","body":["import { Response, NextFunction } from \"express\";","import { JwtPayload, verify } from \"jsonwebtoken\";","import { AuthRequest } from \"..\/models\/auth_request\";","","function verifyToken(token: string, secret: string): Promise<JwtPayload> {","  return new Promise((resolve, reject) => {","    verify(token, secret, (err, decoded) => {","      if (err) {","        return reject(err);","      }","      if (!decoded || typeof decoded === \"string\") {","        return reject(new Error(\"Invalid token payload\"));","      }","      resolve(decoded as JwtPayload);","    });","  });","}","","export async function ensureAuthentication(","  req: AuthRequest,","  res: Response,","  next: NextFunction,","): Promise<void> {","  try {","    const authHeader = req.headers.authorization;","    if (!authHeader?.startsWith(\"Bearer \")) {","      res.status(401).json({ error: \"Unauthorized\" });","      return;","    }","","    const token = authHeader.split(\" \")[1];","    if (!token) {","      res.status(401).json({ error: \"Unauthorized\" });","      return;","    }","","    const jwt_secret = process.env.JWT_SECRET;","    if (!jwt_secret) {","      res.status(500).json({ error: \"Server configuration error\" });","      return;","    }","","    req.user = await verifyToken(token, jwt_secret);","    next();","  } catch (err) {","    res.status(401).json({ error: \"Authentication failed\" });","    return;","  }","}"]},"app":{"prefix":"app","body":["import express from \"express\"","import helmet from \"helmet\"","import dotenv from \"dotenv\"","import cors from \"cors\"","","dotenv.config()","const app = express()","","app.use(helmet());","app.use(cors());","app.use(express.json())"]},"autosize":{"prefix":"autosize","body":["\/\/ text area auto-resizer based on value & scroll","export default function useAutosizeTextArea(","  areaRef: HTMLTextAreaElement | null,","  value: string,",") {","  useEffect(() => {","    if (areaRef) {","      areaRef.style.height = \"0\";","      const scrollHeight = areaRef.scrollHeight;","      areaRef.style.height = scrollHeight + \"px\";","    }","  }, [areaRef, value]);","}"]},"reqres":{"prefix":"reqres","body":"req: Request, res: Response"}}
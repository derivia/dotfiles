{"corsopts":{"body":["const corsOptions: CorsOptions = {","\torigin:","\t\tprocess.env.NODE_ENV === \"development\"","\t\t\t? [\"http:\/\/localhost:5173\", \"http:\/\/ui:5173\"] \/\/ 5173 - Vite default port","\t\t\t: \"https:\/\/<production-domain>\",","\tcredentials: true,","\tmethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],","\tallowedHeaders: [\"Content-Type\", \"Authorization\"],","};"],"prefix":"corsopts"},"debugprint":{"body":"console.log(`[Debug]: \\${${1}}`)","prefix":["dbg","debug"]},"caf":{"body":["const ${1} = async (${2}) => {","","}"],"prefix":"caf"},"baseurl":{"body":["const BASE_URL = import.meta.env","\t? \"http:\/\/localhost:3030\/api\"","\t: \"https:\/\/<production-domain>\/api\";"],"prefix":"baseurl"},"app":{"body":["import express from \"express\"","import helmet from \"helmet\"","import dotenv from \"dotenv\"","import cors from \"cors\"","","dotenv.config()","const app = express()","","app.use(helmet());","app.use(cors());","app.use(express.json())"],"prefix":"app"},"expdef":{"prefix":"expdef","body":["import { debug } from \"console\";","import cookieParser from \"cookie-parser\";","import cors, { CorsOptions } from \"cors\";","import dotenv from \"dotenv\";","import express, { NextFunction, Request, Response } from \"express\";","import helmet from \"helmet\";","import { environment, api_port } from \".\/config\/env\";","import { ApiError, InternalError } from \".\/core\/error\";","import { cspConfig } from \".\/config\/csp\"","","dotenv.config();","","const app = express();","","app.use(helmet.contentSecurityPolicy(cspConfig));","app.disable(\"x-powered-by\");","","const allowedOrigins =","\tprocess.env.NODE_ENV === \"development\"","\t\t? \/https?:\\\/\\\/(localhost|ui):(4173|5173)\/ \/\/ Regex for development","\t\t: \"https:\/\/<production-domain>\"; \/\/ Production domain","","const corsOptions: CorsOptions = {","\torigin: allowedOrigins,","\tcredentials: true,","\tmethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],","\tallowedHeaders: [\"Content-Type\", \"Authorization\"],","};","","app.use(cors(corsOptions));","app.use(cookieParser());","app.use(express.json());","const port = api_port || 3030;","","\/\/ imported things here (after security and json configuration)","","\/\/ default unknown endpoint response","app.use((_req: Request, res: Response) => {","\tres.status(404).json({ error: \"not found\" });","});","","const server = app.listen(port, () => {","\tconsole.log(\"[Server] listening on port \" + port);","});","","\/\/ error handler middleware","app.use((err: ApiError, _req: Request, res: Response, _next: NextFunction) => {","\tif (err instanceof ApiError) {","\t\tif (environment === \"development\") {","\t\t\t\/\/ Send development details","\t\t\treturn res.status(500).send(err);","\t\t} else {","\t\t\tApiError.handle(err, res);","\t\t}","\t} else {","\t\t\/\/ Handle non-ApiError","\t\tApiError.handle(new InternalError(), res);","\t}","});","","process.on(\"SIGTERM\", () => {","\tdebug(\"Gracefully stopping HTTP server.\");","\tserver.close(() => {","\t\tdebug(\"Server closed.\");","\t});","});"]},"updown-1":{"body":["\/\/ use with style={upDown} on some element","","export const upDown = {","\tdisplay: \"inline-block\",","\tfontSize: \"2rem\",","\tanimation: \"upDown 1s ease-in-out infinite\",","};","","export const keyframes = `","    @keyframes upDown {","      0%, 100% {","        transform: translateY(0);","      }","      50% {","        transform: translateY(-10px);","      }","    }","  `;"],"prefix":"updown"},"reqauthcookie":{"body":["const authenticate = async (","\treq: AuthRequest,","\tres: Response,","\tnext: NextFunction,",") => {","\tif (req.method === \"GET\") {","\t\treturn next();","\t}","","\tconst token = req.cookies.auth_token as string;","","\tif (!token) {","\t\tres.status(401).json({ error: \"Unauthorized\" });","\t\treturn;","\t}","","\tif (!AuthService.verifyToken(token)) {","\t\tres.status(403).json({ error: \"Unauthorized\" });","\t\treturn;","\t}","","\tnext();","};"],"prefix":"reqauthcookie"},"ensauth":{"body":["export async function ensureAuthentication(","  req: AuthRequest, \/\/ <-- defined this correctly","  res: Response,","  next: NextFunction,",") {","  try {","    const authHeader = req.headers.authorization;","    if (!authHeader?.startsWith(\"Bearer \")) {","      return res.status(401).json({ error: \"Unauthorized\" });","    }","","    const token = authHeader.split(\" \")[1]; \/\/ gets the bearer token value","","    if (!token) {","      return res.status(401).json({ error: \"Unauthorized\" });","    }","","    verify(","      token,","      process.env.JWT_SECRET as string,","      (err: VerifyErrors | null, decoded: JwtPayload | string | undefined) => {","        if (err) {","          return res.status(401).json({ error: \"Unauthorized\" });","        }","        if (!decoded || typeof decoded === \"string\") {","          return res.status(401).json({","            error: \"Invalid token payload\",","          });","        }","        req.user = decoded as JwtPayload;","        return next();","      },","    );","  } catch (err) {","    return res.status(401).json({ error: \"Authentication failed\" });","  }","}"],"prefix":"ensauth"},"errorhandler":{"body":["\/\/ error handler middleware","app.use((err: ApiError, _req: Request, res: Response, _next: NextFunction) => {","\tif (err instanceof ApiError) {","\t\tif (environment === \"development\") {","\t\t\t\/\/ Send development details","\t\t\treturn res.status(500).send(err);","\t\t} else {","\t\t\tApiError.handle(err, res);","\t\t}","\t} else {","\t\t\/\/ Handle non-ApiError","\t\tApiError.handle(new InternalError(), res);","\t}","});"],"prefix":"errorhandler"},"reqresn":{"body":"req: Request, res: Response, next: NextFunction","prefix":"reqresn"},"envvar":{"body":"const ${1} = process.env.${2};","prefix":"envvar"},"constrastcolor":{"body":["export const getContrastColor = (hexColor: string): string => {","\tconst sanitizedHex = hexColor.replace(\/^#\/, \"\");","\tconst r = parseInt(sanitizedHex.substring(0, 2), 16) \/ 255;","\tconst g = parseInt(sanitizedHex.substring(2, 4), 16) \/ 255;","\tconst b = parseInt(sanitizedHex.substring(4, 6), 16) \/ 255;","\tconst luminance = (value: number) =>","\t\tvalue <= 0.03928 ? value \/ 12.92 : Math.pow((value + 0.055) \/ 1.055, 2.4);","","\t\/\/ https:\/\/en.wikipedia.org\/wiki\/Luma_(video)","\tconst relLuminance =","\t\t0.2126 * luminance(r) + 0.7152 * luminance(g) + 0.0722 * luminance(b);","","\t\/\/ return black or white based on the luminance threshold","\treturn relLuminance > 0.179 ? \"black\" : \"white\";","};"],"prefix":"constrastcolor"},"reqres":{"body":"req: Request, res: Response","prefix":"reqres"},"!resp":{"body":["if (!response.ok) {","\tthrow new Error(`[error] Status: \\${response.status}`);","}"],"prefix":"!resp"},"404":{"body":["app.use(function (req: Request, res: Response, next: NextFunction) {","  res.status(404).json({ error: \"Not found\" });","  return;","});"],"prefix":"404"},"asyncauth":{"body":["import { Response, NextFunction } from \"express\";","import { JwtPayload, verify } from \"jsonwebtoken\";","import { AuthRequest } from \"..\/models\/auth_request\";","","function verifyToken(token: string, secret: string): Promise<JwtPayload> {","  return new Promise((resolve, reject) => {","    verify(token, secret, (err, decoded) => {","      if (err) {","        return reject(err);","      }","      if (!decoded || typeof decoded === \"string\") {","        return reject(new Error(\"Invalid token payload\"));","      }","      resolve(decoded as JwtPayload);","    });","  });","}","","export async function ensureAuthentication(","  req: AuthRequest,","  res: Response,","  next: NextFunction,","): Promise<void> {","  try {","    const authHeader = req.headers.authorization;","    if (!authHeader?.startsWith(\"Bearer \")) {","      res.status(401).json({ error: \"Unauthorized\" });","      return;","    }","","    const token = authHeader.split(\" \")[1];","    if (!token) {","      res.status(401).json({ error: \"Unauthorized\" });","      return;","    }","","    const jwt_secret = process.env.JWT_SECRET;","    if (!jwt_secret) {","      res.status(500).json({ error: \"Server configuration error\" });","      return;","    }","","    req.user = await verifyToken(token, jwt_secret);","    next();","  } catch (err) {","    res.status(401).json({ error: \"Authentication failed\" });","    return;","  }","}"],"prefix":"asyncauth"},"prism":{"body":["import { PrismaClient } from \"@prisma\/client\";","","const prisma = new PrismaClient();","","async function main() {","  \/\/ ... you will write your Prisma Client queries here","}","","main()","  .then(async () => {","    await prisma.\\$disconnect();","  })","  .catch(async (e) => {","    console.error(e);","    await prisma.\\$disconnect();","    process.exit(1);","  });"],"prefix":"prism"},"apirequest":{"body":["import axios from \"axios\";","","type Method = \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";","","export const request = async (","\ttype: Method,","\troute: string,","\turl?: string,","\theaders?: object,","\tdata?: object,",") => {","\tif (!url) {","\t\turl = import.meta.env","\t\t\t? \"http:\/\/localhost:3030\/api\/\"","\t\t\t: \"https:\/\/<production-domain>\/api\/\";","\t}","","\ttry {","\t\tconst response = await axios({","\t\t\tmethod: type,","\t\t\turl: `\\${url}\\${route}`,","\t\t\theaders,","\t\t\tdata,","\t\t\twithCredentials: true,","\t\t});","\t\treturn response;","\t} catch (error) {","\t\tthrow new Error(\"Request failed\");","\t}","};"],"prefix":"apirequest"},"updown":{"body":["export const upDown = {","\tdisplay: \"inline-block\",","\tfontSize: \"2rem\",","\tanimation: \"upDown 1s ease-in-out infinite\",","};","","export const keyframes = `","    @keyframes upDown {","      0%, 100% {","        transform: translateY(0);","      }","      50% {","        transform: translateY(-10px);","      }","    }","  `;"],"prefix":"updown"},"asynchandler":{"body":["import { Request, Response, NextFunction } from 'express';","","type AsyncFunction = (","  req: Request,","  res: Response,","  next: NextFunction,",") => Promise<any>;","","export default (execution: AsyncFunction) =>","  (req: Request, res: Response, next: NextFunction) => {","    execution(req, res, next).catch(next);","  };"],"prefix":"asynchandler"},"jwheader":{"body":["\/\/ prettier-ignore","function authenticateToken(req: Request, res: Response, next: NextFunction): any {","  const authHeader = req.headers[\"authorization\"]","  const token = authHeader && authHeader.split(\" \")[1]","}"],"prefix":"jwheader"},"cf":{"body":["const ${1} = (${2}) => {","","}"],"prefix":"cf"},"autosize":{"body":["\/\/ text area auto-resizer based on value & scroll","export default function useAutosizeTextArea(","  areaRef: HTMLTextAreaElement | null,","  value: string,",") {","  useEffect(() => {","    if (areaRef) {","      areaRef.style.height = \"0\";","      const scrollHeight = areaRef.scrollHeight;","      areaRef.style.height = scrollHeight + \"px\";","    }","  }, [areaRef, value]);","}"],"prefix":"autosize"},"ratelimit-1":{"body":["import rateLimit from \"express-rate-limit\";","","export const loginLimiter = rateLimit({","\twindowMs: 15 * 60 * 1000,","\tmax: 5,","\tmessage: { error: \"Too many login attempts.\" },","\tstandardHeaders: true,","\tlegacyHeaders: false,","});"],"prefix":"ratelimit"}}
{"toast":{"body":["import React, {","\tuseState,","\tuseEffect,","\tcreateContext,","\tuseContext,","\tuseCallback,","} from \"react\";","import { createPortal } from \"react-dom\";","","type ToastType = \"success\" | \"error\" | \"warning\" | \"info\";","","interface ToastMessage {","\tid: string;","\tmessage: string;","\ttype: ToastType;","}","","interface ToastContextType {","\taddToast: (message: string, type?: ToastType) => void;","}","","const ToastContext = createContext<ToastContextType | undefined>(undefined);","","export const ToastProvider: React.FC<{ children: React.ReactNode }> = ({","\tchildren,","}) => {","\tconst [toasts, setToasts] = useState<ToastMessage[]>([]);","","\tconst addToast = useCallback((message: string, type: ToastType = \"info\") => {","\t\tconst id = Date.now().toString();","\t\tsetToasts((prev) => [...prev, { id, message, type }]);","\t}, []);","","\tconst removeToast = useCallback((id: string) => {","\t\tsetToasts((prev) => prev.filter((toast) => toast.id !== id));","\t}, []);","","\treturn (","\t\t<ToastContext.Provider value={{ addToast }}>","\t\t\t{children}","\t\t\t{createPortal(","\t\t\t\t<div className=\"fixed top-4 right-4 z-50 flex flex-col space-y-2\">","\t\t\t\t\t{toasts.map((toast) => (","\t\t\t\t\t\t<Toast","\t\t\t\t\t\t\tkey={toast.id}","\t\t\t\t\t\t\tmessage={toast.message}","\t\t\t\t\t\t\ttype={toast.type}","\t\t\t\t\t\t\tonClose={() => removeToast(toast.id)}","\t\t\t\t\t\t/>","\t\t\t\t\t))}","\t\t\t\t</div>,","\t\t\t\tdocument.body,","\t\t\t)}","\t\t</ToastContext.Provider>","\t);","};","","export const useToast = () => {","\tconst context = useContext(ToastContext);","\tif (!context) {","\t\tthrow new Error(\"useToast must be used within a ToastProvider\");","\t}","\treturn context;","};","","interface ToastProps {","\tmessage: string;","\ttype: ToastType;","\tonClose: () => void;","}","","const Toast: React.FC<ToastProps> = ({ message, type, onClose }) => {","\tconst [isVisible, setIsVisible] = useState(true);","","\tuseEffect(() => {","\t\tconst timer = setTimeout(() => {","\t\t\tsetIsVisible(false);","\t\t}, 5000);","","\t\treturn () => {","\t\t\tclearTimeout(timer);","\t\t};","\t}, []);","","\tconst handleTransitionEnd = () => {","\t\tif (!isVisible) {","\t\t\tonClose();","\t\t}","\t};","","\tlet bgColorClass: string;","\tlet borderColorClass: string;","\tlet textColorClass: string;","","\tswitch (type) {","\t\tcase \"success\":","\t\t\tbgColorClass = \"bg-green-100\";","\t\t\tborderColorClass = \"border-green-400\";","\t\t\ttextColorClass = \"text-green-700\";","\t\t\tbreak;","\t\tcase \"error\":","\t\t\tbgColorClass = \"bg-red-100\";","\t\t\tborderColorClass = \"border-red-400\";","\t\t\ttextColorClass = \"text-red-700\";","\t\t\tbreak;","\t\tcase \"warning\":","\t\t\tbgColorClass = \"bg-yellow-100\";","\t\t\tborderColorClass = \"border-yellow-400\";","\t\t\ttextColorClass = \"text-yellow-700\";","\t\t\tbreak;","\t\tcase \"info\":","\t\t\tbgColorClass = \"bg-blue-100\";","\t\t\tborderColorClass = \"border-blue-400\";","\t\t\ttextColorClass = \"text-blue-700\";","\t\t\tbreak;","\t\tdefault:","\t\t\tbgColorClass = \"bg-gray-100\";","\t\t\tborderColorClass = \"border-gray-400\";","\t\t\ttextColorClass = \"text-gray-700\";","\t}","","\treturn (","\t\t<div","\t\t\tclassName={`${bgColorClass} border ${borderColorClass} ${textColorClass} px-4 py-3 rounded-lg shadow-md transition-opacity duration-300 ${","\t\t\t\tisVisible ? \"opacity-100\" : \"opacity-0\"","\t\t\t}`}","\t\t\trole=\"alert\"","\t\t\tonTransitionEnd={handleTransitionEnd}","\t\t>","\t\t\t<div className=\"flex items-center\">","\t\t\t\t<span className=\"block sm:inline mr-2\">{message}</span>","\t\t\t\t<button onClick={onClose} className=\"ml-auto\">","\t\t\t\t\t<svg","\t\t\t\t\t\tclassName={`h-5 w-5 ${textColorClass}`}","\t\t\t\t\t\tfill=\"none\"","\t\t\t\t\t\tstroke=\"currentColor\"","\t\t\t\t\t\tviewBox=\"0 0 24 24\"","\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"","\t\t\t\t\t>","\t\t\t\t\t\t<path","\t\t\t\t\t\t\tstrokeLinecap=\"round\"","\t\t\t\t\t\t\tstrokeLinejoin=\"round\"","\t\t\t\t\t\t\tstrokeWidth=\"2\"","\t\t\t\t\t\t\td=\"M6 18L18 6M6 6l12 12\"","\t\t\t\t\t\t></path>","\t\t\t\t\t</svg>","\t\t\t\t</button>","\t\t\t</div>","\t\t</div>","\t);","};"],"prefix":"toast"},"rta":{"body":["import { useEffect } from \"react\";","","interface TextAreaResizableProps {","  placeholder?: string;","  className?: string;","  form?: string;","}","","export default function TextAreaResizable({","  placeholder,","  className,","  form,","}: TextAreaResizableProps) {","  useEffect(() => {","    const tx = document.getElementsByTagName(\"textarea\");","","    const onInput = (event: Event) => {","      const target = event.target as HTMLTextAreaElement;","      if (target) {","        target.style.height = \"auto\";","        target.style.height = `\\${target.scrollHeight}px`;","      }","    };","    for (let i = 0; i < tx.length; i++) {","      tx[i].style.height = `\\${tx[i].scrollHeight}px`;","      tx[i].style.overflowY = \"hidden\";","      tx[i].addEventListener(\"input\", onInput);","    }","    return () => {","      for (let i = 0; i < tx.length; i++) {","        tx[i].removeEventListener(\"input\", onInput);","      }","    };","  }, []);","","  return (","    <textarea","      className={className}","      form={form}","      placeholder={placeholder || \"Type something here\"}","    ></textarea>","  );","}"],"prefix":"rta"},"handlesubmit":{"body":["const handleSubmit = (e: FormEvent<HTMLFormElement>) => {","\te.preventDefault();","};"],"prefix":"handlesubmit"},"caf":{"body":["const ${1:name} = async (${2:params}) => {","","}"],"prefix":"caf"},"notfound":{"body":["import { Link } from \"react-router-dom\";","","/*"," * Requires: react, react-router-dom, typescript & tailwindcss"," * Default 404 - Not found page."," */","const NotFound = () => {","\treturn (","\t\t<div className=\"h-screen text-3xl flex flex-col gap-3 justify-center items-center\">","\t\t\t<p>404 - Not found</p>","\t\t\t<Link className=\"flex flex-col justify-center\" to=\"/\">","\t\t\t\t<span className=\"rounded w-fit shadow self-center bg-gray-300 p-2\">","\t\t\t\t\tGo Home","\t\t\t\t</span>","\t\t\t</Link>","\t\t</div>","\t);","};","","export default NotFound;"],"prefix":"notfound"},"dbg":{"body":"console.log(`[Debug]: \\${${1}}`)","prefix":"dbg"},"usst":{"body":"const [${1:}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:});","prefix":"usst"},"recf":{"body":["const ${TM_FILENAME_BASE} = () => {","  return (","    <div>${1:}</div>","  )","}","","export default ${TM_FILENAME_BASE}"],"prefix":"recf"},"formDataHandleChange":{"body":["\tconst [formData, setFormData] = useState({","\t\tusername: \"\",","\t\temail: \"\",","\t\tpassword: \"\",","\t});","","\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {","\t\tconst { name, value } = e.target;","\t\tsetFormData((prev) => ({","\t\t\t...prev,","\t\t\t[name]: value,","\t\t}));","\t};"],"prefix":"formDataHandleChange"},"footer":{"body":["import { Link } from \"react-router-dom\";","","const Footer = () => {","\treturn (","\t\t<footer className=\"fixed bottom-0 left-0 right-0\">","\t\t\t<Link to=\"/\" className=\"block p-4\">","\t\t\t\t<img className=\"w-4 h-4\" src=\"home.svg\" alt=\"Home icon\"></img>","\t\t\t</Link>","\t\t</footer>","\t);","};","","export default Footer;"],"prefix":"footer"},"forminput":{"body":["type FormInputProps = {","\ttype: string;","\tname: string;","\tvalue?: string;","\tplaceholder?: string;","\tclassName?: string;","\tonChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;","\tchecked?: boolean; // for radio buttons","};","","const FormInput = ({","\ttype,","\tname,","\tvalue,","\tplaceholder,","\tonChange,","\tclassName,","\tchecked,","}: FormInputProps) => {","\treturn (","\t\t<input","\t\t\ttype={type}","\t\t\tname={name}","\t\t\tvalue={value}","\t\t\tplaceholder={placeholder}","\t\t\tonChange={onChange}","\t\t\tclassName={`p-2 rounded shadow bg-neutral-100 ${className}`}","\t\t\tchecked={checked}","\t\t/>","\t);","};","","export default FormInput;"],"prefix":"forminput"},"slidernumbered":{"body":["import React, { useState } from \"react\";","","interface ScoreSliderProps {","\tdefaultValue?: number;","\tonChange?: (value: number) => void;","\tclassName?: string;","\ttitle: string;","}","","const SliderNumbered = ({","\tdefaultValue = 75,","\tonChange,","\tclassName = \"\",","\ttitle,","}: ScoreSliderProps) => {","\tconst [value, setValue] = useState(defaultValue);","\tconst [isHovered, setIsHovered] = useState(false);","","\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {","\t\tconst newValue = Number(e.target.value);","\t\tsetValue(newValue);","\t\tonChange?.(newValue);","\t};","","\treturn (","\t\t<div className={`w-full max-w-sm ${className}`}>","\t\t\t<h2 className=\"self-center font-medium text-xl mb-2\">{title}</h2>","","\t\t\t<div className=\"flex items-center gap-4\">","\t\t\t\t<div className=\"relative flex-1\">","\t\t\t\t\t<input","\t\t\t\t\t\ttype=\"range\"","\t\t\t\t\t\tmin={0}","\t\t\t\t\t\tmax={100}","\t\t\t\t\t\tvalue={value}","\t\t\t\t\t\tonChange={handleChange}","\t\t\t\t\t\tclassName={`","              w-full h-2 rounded-lg cursor-pointer","              appearance-none","            `}","\t\t\t\t\t\tstyle={{","\t\t\t\t\t\t\tbackground: `linear-gradient(to right, var(--accent) ${value}%, #e2e2e2 ${value}%)`,","\t\t\t\t\t\t}}","\t\t\t\t\t\tonMouseEnter={() => setIsHovered(true)}","\t\t\t\t\t\tonMouseLeave={() => setIsHovered(false)}","\t\t\t\t\t/>","","\t\t\t\t\t{isHovered && (","\t\t\t\t\t\t<div","\t\t\t\t\t\t\tclassName=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-6 bg-gray-700 text-white text-xs py-1 px-2 rounded-md\"","\t\t\t\t\t\t\tstyle={{ left: `calc(${value}% - 10px)` }}","\t\t\t\t\t\t>","\t\t\t\t\t\t\t{value}%","\t\t\t\t\t\t</div>","\t\t\t\t\t)}","","\t\t\t\t\t<div className=\"flex justify-between text-xs text-gray-500 mt-1\">","\t\t\t\t\t\t<span>0%</span>","\t\t\t\t\t\t<span>50%</span>","\t\t\t\t\t\t<span>100%</span>","\t\t\t\t\t</div>","\t\t\t\t</div>","\t\t\t</div>","\t\t</div>","\t);","};","","export default SliderNumbered;"],"prefix":"slidernumbered"},"cf":{"body":["const ${1:name} = (${2:params}) => {","","}"],"prefix":"cf"},"loaderror":{"body":["const [loading, setLoading] = useState<boolean>(false);","const [error, setError] = useState<string>(\"\");"],"prefix":"loaderror"}}
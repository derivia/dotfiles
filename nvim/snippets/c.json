{"debug":{"prefix":"debug","body":"fprintf(stderr, \"\\033[1;33m[DEBUG]: \\033[0m\\n\");"},"free_lines":{"body":["void free_lines(char **lines, size_t line_count)","{","  for (size_t i = 0; i < line_count; i++) {","    free(lines[i]);","  }","  free(lines);","}"],"prefix":"free_lines"},"read_file":{"body":["\/*"," * Takes a file path, opens a file descriptor"," * and appends each line to a buffer [a array of strings (char *)]"," * returning the buffer after reading all lines."," *"," * Remember to free all lines and free the buffer as well."," *\/","char **read_file(char *path, size_t *line_count)","{","  FILE *fp;","  char *line = NULL;","  size_t len = 0;","  ssize_t read;","","  fp = fopen(path, \"r\");","  if (fp == NULL) {","    perror(\"Failed to open file.\");","    exit(EXIT_FAILURE);","  }","","  size_t bufferSize = 10;","  char **buffer = malloc(bufferSize * sizeof(char *));","  if (buffer == NULL) {","    perror(\"Failed to allocate buffer\");","    fclose(fp);","    exit(EXIT_FAILURE);","  }","","  size_t counter = 0;","  \/*","   * Resize buffer as needed while moving contents of file line by line.","   *\/","  while ((read = getline(&line, &len, fp)) != -1) {","    if (counter >= bufferSize) {","      bufferSize *= 2;","      buffer = realloc(buffer, bufferSize * sizeof(char *));","      if (buffer == NULL) {","        perror(\"Failed to reallocate memory\");","        fclose(fp);","        free(line);","        exit(EXIT_FAILURE);","      }","    }","    buffer[counter] = strdup(line);","    if (buffer[counter] == NULL) {","      perror(\"Failed to duplicate line\");","      fclose(fp);","      free(line);","      for (size_t i = 0; i < counter; i++) {","        free(buffer[i]);","      }","      free(buffer);","      exit(EXIT_FAILURE);","    }","    counter++;","  }","","  free(line);","  fclose(fp);","","  *line_count = counter;","","  return buffer;","}"],"prefix":"read_file"},"libimpexp":{"body":["#ifdef _WIN32","#ifdef <LIB>_EXPORTS","#define <LIB>_API \\","  __declspec(dllexport) \/\/ when building the library, export the functions","#else","#define <LIB>_API \\","  __declspec(dllimport) \/\/ when using the library, import the functions","#endif","#else","#define <LIB>_API \\","  __attribute__((visibility(\"default\"))) \/\/ for GCC\/Clang (Linux\/Mac)","#endif"],"prefix":"libimpexp"}}